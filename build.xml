<!--suppress AntResolveInspection -->
<project name="TickProfiler" default="main" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property environment="env"/>
	<!-- Properties -->

	<property name="build.dir" value="build"/>
	<property name="src.dir" value="src"/>
	<property name="lib.dir" value="libs"/>

	<property name="download.dir" value="download"/>

	<property name="classes.dir" value="${build.dir}/classes"/>
	<property name="jar.dir" value="target"/>

	<property name="forge.dir" value="${build.dir}/forge"/>
	<property name="mcp.dir" value="${forge.dir}/mcp"/>

	<property name="mcpsrc.dir" value="${mcp.dir}/src"/>

	<property name="mc.version" value="1.5.2"/>
	<property name="forge.version" value="7.8.0.688"/>
	<property name="project.version" value="1.0.0"/>

	<property name="forge.name" value="minecraftforge-src-${mc.version}-${forge.version}.zip"/>
	<property name="maven-ant-tasks.name" value="maven-ant-tasks-2.1.3.jar"/>

	<property name="maven-ant-tasks.url" value="http://apache.mirrors.timporter.net/maven/ant-tasks/2.1.3/binaries/${maven-ant-tasks.name}"/>

	<available property="forge-exists" file="${download.dir}/${forge.name}"/>
	<available property="maven-ant-tasks-exists" file="${lib.dir}/${maven-ant-tasks.name}"/>

	<condition property="out-of-date">
		<not>
			<and>
				<available file="${download.dir}/${forge.name}"/>
				<available file="${mcpsrc.dir}"/>
			</and>
		</not>
	</condition>

	<path id="class.path">
		<fileset dir="${mcp.dir}/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<mkdir dir="${download.dir}"/>
	<mkdir dir="${lib.dir}"/>
	<mkdir dir="${build.dir}"/>

	<!-- Targets -->

	<!-- Clear build directory -->
	<target name="clean">
		<delete dir="${build.dir}"/>
		<mkdir dir="${build.dir}"/>
	</target>

	<!-- Set full version -->
	<target name="initialize-version" depends="version-provided,version-not-provided">
		<property name="project.version.full" value="${project.version}.${build.number}"/>
	</target>

	<!-- Set unknown build number -->
	<target name="version-not-provided" unless="env.BUILD_NUMBER">
		<property name="build.number" value="unknown"/>
	</target>

	<!-- Set build number from environment -->
	<target name="version-provided" if="env.BUILD_NUMBER">
		<property name="build.number" value="${env.BUILD_NUMBER}"/>
	</target>

	<!-- Download necessary files -->
	<target name="download-files" depends="download-forge,download-maven-ant-tasks"/>

	<!-- Download Maven Ant Tasks -->
	<target name="download-maven-ant-tasks" unless="maven-ant-tasks-exists">
		<get src="${maven-ant-tasks.url}" dest="${lib.dir}/${maven-ant-tasks.name}"/>
	</target>

	<!-- Download forge (if it doesn't exist) -->
	<target name="download-forge" unless="forge-exists">
		<get src="http://files.minecraftforge.net/${forge.name}" dest="${download.dir}" usetimestamp="True"/>
	</target>

	<!-- Downloads libs -->
	<target name="download-libs">
		<path
						id="maven-ant-tasks.classpath"
						path="${lib.dir}/${maven-ant-tasks.name}"/>
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
						 uri="antlib:org.apache.maven.artifact.ant"
						 classpathref="maven-ant-tasks.classpath">
		</typedef>
		<artifact:dependencies filesetId="dependency.fileset"
													 versionsId="dependency.versions">
			<artifact:dependency groupId="com.github.stephenc.high-scale-lib" artifactId="high-scale-lib" version="1.1.4"/>
		</artifact:dependencies>
		<copy todir="${lib.dir}">
			<fileset refid="dependency.fileset"/>
			<mapper classpathref="maven-ant-tasks.classpath"
							classname="org.apache.maven.artifact.ant.VersionMapper"
							from="${dependency.versions}" to="flatten"/>
		</copy>
	</target>

	<!-- Setup mcp and forge -->
	<target name="setup" depends="download-files" if="out-of-date">

		<delete dir="${forge.dir}" failonerror="false"/>

		<unzip dest="${forge.dir}/.." src="${download.dir}/${forge.name}"/>

		<!-- Fix executable permissions -->
		<chmod dir="${forge.dir}" perm="ugo+rx" includes="**.sh"/>

		<!-- Install forge -->
		<exec dir="${forge.dir}" executable="cmd" osfamily="windows">
			<arg line="/c install.cmd"/>
		</exec>

		<exec dir="${forge.dir}" executable="sh" osfamily="unix">
			<arg value="install.sh"/>
		</exec>

	</target>

	<target name="compile" depends="initialize-version,setup,download-libs">

		<delete dir="${classes.dir}"/>
		<mkdir dir="${classes.dir}"/>

		<!-- Copy sources -->
		<copy todir="${mcpsrc.dir}/minecraft">
			<fileset dir="${src.dir}/common"/>
			<filterset>
				<filter token="MC_VERSION" value="${mc.version}"/>
				<filter token="MOD_VERSION" value="${project.version.full}"/>
				<filter token="MOD_ID" value="${ant.project.name}"/>
				<filter token="MOD_NAME" value="${ant.project.name}"/>
			</filterset>
		</copy>

		<!-- Copy libs -->
		<copy todir="${mcp.dir}/lib">
			<fileset dir="${lib.dir}"/>
		</copy>

		<!-- Recompile -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c recompile.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg value="recompile.sh"/>
		</exec>

		<!-- Reobfuscate -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c reobfuscate_srg.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg value="reobfuscate_srg.sh"/>
		</exec>

		<!-- Copy classes -->
		<copy todir="${classes.dir}">
			<fileset dir="${mcp.dir}/reobf/minecraft"/>
		</copy>

		<!-- Copy resources -->
		<copy todir="${classes.dir}">
			<fileset dir="resources"/>
			<filterset>
				<filter token="MC_VERSION" value="${mc.version}"/>
				<filter token="MOD_VERSION" value="${project.version.full}"/>
				<filter token="MOD_ID" value="${ant.project.name}"/>
				<filter token="MOD_NAME" value="${ant.project.name}"/>
			</filterset>
		</copy>

		<!-- Reset src dir to post-forge-install state -->
		<delete dir="${mcpsrc.dir}/minecraft/me/nallar"/>

		<!-- Check that MCP compiled it successfully -->
		<fail message="MCP failed to build">
			<condition>
				<or>
					<resourcecontains resource="${mcp.dir}/logs/client_compile.log" substring="error:"/>
					<resourcecontains resource="${mcp.dir}/logs/client_compile.log" substring=" errors"/>
				</or>
			</condition>
		</fail>

	</target>

	<target name="packageDependencies">
		<unzip dest="${classes.dir}/" src="${lib.dir}/high-scale-lib.jar"/>
		<delete file="${classes.dir}/net/minecraft/server/MinecraftServer.class"/>
		<delete dir="${classes.dir}/META-INF"/>
		<delete dir="${classes.dir}/net/minecraftforge"/>
		<delete dir="${classes.dir}/cpw/"/>
		<delete>
			<fileset dir="${classes.dir}">
				<include name="*.class"/>
			</fileset>
		</delete>
	</target>

	<!-- Package the compiled files -->
	<target name="package" depends="initialize-version">

		<delete dir="${jar.dir}"/>
		<mkdir dir="${jar.dir}"/>
		<jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}"/>
		<copy file="${jar.dir}/${ant.project.name}.jar" tofile="${jar.dir}/${ant.project.name}-${mc.version}-${project.version.full}.jar"/>

	</target>

	<!-- Default target to run -->
	<target name="main" depends="compile,packageDependencies,package"/>

</project>
